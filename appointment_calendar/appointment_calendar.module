<?php

/**
 * 
 * @return string
 * Implements hook_menu
 */
function appointment_calendar_menu() {
  $items = array();
//  $items['admin/config/appointment_calendar'] = array(
//    'title' => 'Appointment Calendar',
//    'description' => 'description',
//    'position' => 'left',
//    'weight' => -25,
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('call_your_setting_form'),
//    'access arguments' => array('administer site configuration'),
//  );
//  $items['admin/config/appointment_calendar/settings'] = array(
//    'title' => 'Appointment Calendar',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('call_your_setting_form'),
//    'access arguments' => array('access administration pages'),
//  );
//  $items['admin/config/appointment_calendar/list'] = array(
//    'title' => 'Lisk of Appointment Calendars',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('call_your_setting_form'),
//    'access arguments' => array('administer authentication'),
//    'weight' => 10,
//  );
//
//
//
////  $items['admin/config/appointment_calendar/list'] = array(
////    'title' => 'Lisk of Appointment Calendars',
////    'page callback' => 'drupal_get_form',
////    'page arguments' => array('call_your_setting_form'),
////    'access arguments' => array('administer authentication'),
////    'weight' => 10,
////  );
  $items['admin/config/appointment-calendar/settings'] = array(
    'title' => 'Appointment Calendar',
    'description' => 'Description about link',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('settings_form'),
    'access arguments' => array('access administration pages'),
  );
  $items['appointcal'] = array(
    'page callback' => 'appointment_show',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * 
 * @return type
 * Implements hook_node_info
 */
/*
function appointment_calendar_node_info() {
  return array(
    'appointment_calendar' => array(
      'name' => t('Appointment Calendar'),
      'base' => 'appointment_calendar',
      'description' => t('A Appointment Calendar content type'),
      'has_title' => TRUE,
      'locked' => FALSE,
    ),
  );
}
*/
/**
 * 
 * @param type $node
 * @param type $form_state
 * @return type
 * Implements hook_form
 */
//function appointment_calendar_form($node, $form_state) {
//  $type = node_type_get_type($node);
//  $form['title'] = array(
//    '#type' => 'textfield',
//    '#title' => check_plain($type->title_label),
//    '#default_value' => !empty($node->title) ? $node->title : '',
//    '#required' => TRUE, '#weight' => -5
//  );
//
//  return $form;
//}

function settings_form($form, $form_state) {
  // drupal_set_title('Add New Person');
  $form = array();
  $default_date = date('Y-m-d', time());
  $form['appointment_from_date'] = array(
    '#title' => t('Appointment From date'),
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '0:+3',
    '#required' => TRUE,
    '#default_value' => $default_date,
      //  '#datepicker_options' => array('minDate' => 0),
      // '#datepicker_options' => array('minDate' => 0, 'maxDate' => 30),
  );

  $form['appointment_to_date'] = array(
    '#title' => t('Appointment To date'),
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '0:+3',
    '#required' => TRUE,
    '#default_value' => $default_date,
      // '#datepicker_options' => array('minDate' => 0),
      // '#datepicker_options' => array('minDate' => 0, 'maxDate' => 30),
  );

  $form['appointment_slot'] = array(
    '#type' => 'textfield',
    '#title' => 'No of Slots:',
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['appointment_fill'] = array(
    '#type' => 'button',
    '#value' => 'Fill Slots',
    '#weight' => 36,
    '#ajax' => array(
      'callback' => 'filltime_slots_callback_form',
      'wrapper' => 'time-slot-check',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $no_slots = !empty($form_state['values']['appointment_slot']) ? $form_state['values']['appointment_slot'] : 0;  
  $form['slots']['#weight'] = 39;
  $form['slots']['#prefix'] = '<div id="time-slot-check">';
  for ($i = 0; $i < $no_slots; $i++) {
  	
    $form['slots']['time_slot_' . $i] = array(
      '#type' => 'textfield',
      '#title' => 'Time Slot ' . $i . ' :',
      //'#required' => TRUE,
      '#description' => t('Ex: 10.00-11.00, 13.00-14.00, etc.,'),
    );
    $form['slots']['time_slot_' . $i . '_capacity'] = array(
      '#type' => 'textfield',
      '#title' => 'Slot ' . $i . ' Capacity',
      //'#required' => TRUE,
      '#description' => t('Only Numeric'),
    );
  }
  $form['slots']['#suffix'] = '</div>';
 // $form['calendar'] = array(
  //   '#weight' => 39,
  //   '#suffix' => '<div id="time-slot-check" class="'.$no_slots.'"></div>',
  // );
  if (!empty($form_state['values']['appointment_slot'])) {
    $form['slots']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
    $form['slots']['reset'] = array(
      '#type' => 'submit',
      '#value' => t('Reset'),
    );
  }
  return $form;
}

function filltime_slots_callback_form($form, &$form_state) {
  return $form['slots'];
}

function settings_form_validate($form, &$form_state) {
  if ($form_state['values']['op'] == 'Reset') {
    drupal_goto(current_path());
  }
  if ($form_state['values']['op'] == 'Submit') {
    // print'<pre>';print_r($form_state['values']);exit;
  }
}

function settings_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == 'Submit') {
    $start_date = $form_state['values']['appointment_from_date'];
    $end_date = $form_state['values']['appointment_to_date'];
    $slots = $form_state['values']['appointment_slot'];
    for ($i = 0; $i < $slots; $i++) {
      $time_slot = $form_state['values']['time_slot_' . $i];
      $time_capacity = $form_state['values']['time_slot_' . $i . '_capacity'];
      $slots_save[$time_slot] = $time_slot;
      $slots_capacity[$time_slot] = $time_capacity;
    }
    $dates = daysBetween(strtotime($start_date), strtotime($end_date));
    foreach ($dates as $each_date) {
      db_merge('appointment_date')
          ->key(array('date' => $each_date))
          ->fields(array(
            'no_slots' => $slots,
            'slot_values' => json_encode($slots_save),
            'slot_capacity' => json_encode($slots_capacity),
          ))
          ->execute();
    }
  }
}

function appointment_calendar_form_alter(&$form, &$form_state, $form_id) {
  global $base_url;
  if ($form_id == 'appointment_calendar_node_form') {
    $form['appointment_date'][LANGUAGE_NONE][0]['#ajax'] = array(
      'callback' => 'timeslot_callback_form',
      'wrapper' => 'slot-check',
      'method' => 'replace',
      'effect' => 'fade',
    );
    $form['appointment_slot']['#prefix'] = '<div id="slot-check">';
    $selected_date = $form_state['values']['appointment_date'][LANGUAGE_NONE][0]['value'];
    if (!empty($selected_date)) {
      $selected_date = explode('T', $form_state['values']['appointment_date'][LANGUAGE_NONE][0]['value']);
      $slot_query = db_select('appointment_date', 'ad');
      $slot_query->fields('ad', array('slot_values'));
      $slot_query->condition('date', strtotime($selected_date[0]));
      $slot_result = $slot_query->execute()->fetchField();
      if (!empty($slot_result)) {
        $form['appointment_slot'][LANGUAGE_NONE]['#options'] = (array) json_decode($slot_result);
      }
    }
    $form['appointment_slot']['#suffix'] = '</div>';
    $form['check'] = array(
      '#type' => 'button',
      '#value' => 'Check Availability',
      '#weight' => 34,
      '#ajax' => array(
        'callback' => 'check_availability_form',
        'wrapper' => 'check-availability',
      ),
    );
    $form['calendar'] = array(
      '#weight' => 39,
      '#suffix' => '<div id="check-availability" style="display:none"><iframe width=500 height=330 src= "'
      . $base_url . '/appointcal' . '" ></iframe></div>',
    );
    drupal_add_js(drupal_get_path('module', 'appointment_calendar') . '/js/appointment_calendar.js');
  }
}

function check_availability_form($form, &$form_state) {
  global $base_url;
  $url = $base_url . '/appointcal?destination=customcal&month=';
  $var = '<div id="check-availability"><iframe id="iid" width=500 height=330 src= "'
      . $url . '" ></iframe></div>';
  return $var;
}

function timeslot_callback_form($form, &$form_state) {

  return $form['appointment_slot'];
}

/**
 * 
 * @return type
 * Implements hook_views_api
 */
function appointment_calendar_views_api() {
  return array(
    'api' => 3.0,
  );
}

/**
 * 
 * @return type
 * Implements hook_views_default_views
 */
function appointment_calendar_views_default_views() {
  $view = views_new_view();
  $view->name = 'appointment_calendar';
  $view->description = '';
  $view->tag = 'Calendar';
  $view->base_table = 'node';
  $view->human_name = 'Appointment Calendar';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['link_display'] = 'page_1';
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['query']['options']['query_comment'] = FALSE;
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'date_views_pager';
  $handler->display->display_options['pager']['options']['date_id'] = 'month';
  $handler->display->display_options['style_plugin'] = 'calendar_style';
  $handler->display->display_options['style_options']['name_size'] = '3';
  $handler->display->display_options['style_options']['with_weekno'] = '0';
  $handler->display->display_options['style_options']['multiday_theme'] = '1';
  $handler->display->display_options['style_options']['theme_style'] = '1';
  $handler->display->display_options['style_options']['max_items'] = '0';
  $handler->display->display_options['row_plugin'] = 'calendar_entity';
  /* Field: Content: Title */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['label'] = '';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  $handler->display->display_options['fields']['title']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['title']['hide_alter_empty'] = FALSE;
  /* Field: Content: Date */
  $handler->display->display_options['fields']['field_date']['id'] = 'field_date';
  $handler->display->display_options['fields']['field_date']['table'] = 'field_data_field_date';
  $handler->display->display_options['fields']['field_date']['field'] = 'field_date';
  $handler->display->display_options['fields']['field_date']['label'] = '';
  $handler->display->display_options['fields']['field_date']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_date']['hide_alter_empty'] = FALSE;
  $handler->display->display_options['fields']['field_date']['settings'] = array(
    'format_type' => 'short',
    'fromto' => 'both',
    'multiple_number' => '',
    'multiple_from' => '',
    'multiple_to' => '',
    'show_repeat_rule' => '',
  );
  $handler->display->display_options['fields']['field_date']['group_rows'] = FALSE;
  $handler->display->display_options['fields']['field_date']['delta_offset'] = '0';
  /* Sort criterion: Content: Date -  start date (field_date) */
  $handler->display->display_options['sorts']['field_date_value']['id'] = 'field_date_value';
  $handler->display->display_options['sorts']['field_date_value']['table'] = 'field_data_field_date';
  $handler->display->display_options['sorts']['field_date_value']['field'] = 'field_date_value';
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 0;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;

  /* Display: Appointment Calendar */
  $handler = $view->new_display('block', 'Appointment Calendar', 'block_3');
  $handler->display->display_options['defaults']['style_plugin'] = FALSE;
  $handler->display->display_options['style_plugin'] = 'calendar_style';
  $handler->display->display_options['style_options']['calendar_type'] = 'day';
  $handler->display->display_options['style_options']['name_size'] = '3';
  $handler->display->display_options['style_options']['mini'] = '0';
  $handler->display->display_options['style_options']['with_weekno'] = '0';
  $handler->display->display_options['style_options']['multiday_theme'] = '1';
  $handler->display->display_options['style_options']['theme_style'] = '0';
  $handler->display->display_options['style_options']['max_items'] = '0';
  $handler->display->display_options['style_options']['groupby_times'] = 'custom';
  $handler->display->display_options['style_options']['groupby_times_custom'] = '10:00:00,12:30:00,15:00:00,17:30:00,20:00:00';
  $handler->display->display_options['defaults']['style_options'] = FALSE;
  $handler->display->display_options['defaults']['row_plugin'] = FALSE;
  $handler->display->display_options['row_plugin'] = 'calendar_entity';
  $handler->display->display_options['row_options']['inline'] = array(
    'title' => 'title',
    'field_date' => 'field_date',
    'field_appointment_date' => 'field_appointment_date',
  );
  $handler->display->display_options['row_options']['separator'] = '-';
  $handler->display->display_options['row_options']['colors']['calendar_colors_type'] = array(
    'appointment' => '#ffffff',
    'article' => '#ffffff',
    'page' => '#ffffff',
    'date' => '#ffffff',
  );
  $handler->display->display_options['defaults']['row_options'] = FALSE;
  $handler->display->display_options['defaults']['fields'] = FALSE;
  /* Field: Content: Title */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['label'] = '';
  $handler->display->display_options['fields']['title']['exclude'] = TRUE;
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  $handler->display->display_options['fields']['title']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['title']['hide_alter_empty'] = FALSE;
  /* Field: Content: Date */
  $handler->display->display_options['fields']['field_date']['id'] = 'field_date';
  $handler->display->display_options['fields']['field_date']['table'] = 'field_data_field_date';
  $handler->display->display_options['fields']['field_date']['field'] = 'field_date';
  $handler->display->display_options['fields']['field_date']['label'] = '';
  $handler->display->display_options['fields']['field_date']['exclude'] = TRUE;
  $handler->display->display_options['fields']['field_date']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_date']['hide_alter_empty'] = FALSE;
  $handler->display->display_options['fields']['field_date']['settings'] = array(
    'format_type' => 'short',
    'fromto' => 'both',
    'multiple_number' => '',
    'multiple_from' => '',
    'multiple_to' => '',
    'show_repeat_rule' => '',
  );
  $handler->display->display_options['fields']['field_date']['group_rows'] = FALSE;
  $handler->display->display_options['fields']['field_date']['delta_offset'] = '0';
  /* Field: Content: Appointment Date */
  $handler->display->display_options['fields']['field_appointment_date']['id'] = 'field_appointment_date';
  $handler->display->display_options['fields']['field_appointment_date']['table'] = 'field_data_field_appointment_date';
  $handler->display->display_options['fields']['field_appointment_date']['field'] = 'field_appointment_date';
  $handler->display->display_options['fields']['field_appointment_date']['label'] = '';
  $handler->display->display_options['fields']['field_appointment_date']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_appointment_date']['settings'] = array(
    'format_type' => 'long',
    'fromto' => 'both',
    'multiple_number' => '',
    'multiple_from' => '',
    'multiple_to' => '',
    'show_repeat_rule' => 'show',
  );
  $handler->display->display_options['defaults']['sorts'] = FALSE;
  /* Sort criterion: Content: Appointment Date -  start date (field_appointment_date) */
  $handler->display->display_options['sorts']['field_appointment_date_value']['id'] = 'field_appointment_date_value';
  $handler->display->display_options['sorts']['field_appointment_date_value']['table'] = 'field_data_field_appointment_date';
  $handler->display->display_options['sorts']['field_appointment_date_value']['field'] = 'field_appointment_date_value';
  $handler->display->display_options['defaults']['arguments'] = FALSE;
  /* Contextual filter: Date: Date (node) */
  $handler->display->display_options['arguments']['date_argument']['id'] = 'date_argument';
  $handler->display->display_options['arguments']['date_argument']['table'] = 'node';
  $handler->display->display_options['arguments']['date_argument']['field'] = 'date_argument';
  $handler->display->display_options['arguments']['date_argument']['default_action'] = 'default';
  $handler->display->display_options['arguments']['date_argument']['default_argument_type'] = 'date';
  $handler->display->display_options['arguments']['date_argument']['summary']['format'] = 'default_summary';
  $handler->display->display_options['arguments']['date_argument']['granularity'] = 'day';
  $handler->display->display_options['arguments']['date_argument']['date_fields'] = array(
    'field_data_field_appointment_date.field_appointment_date_value' => 'field_data_field_appointment_date.field_appointment_date_value',
  );
  $handler->display->display_options['block_description'] = 'Appointment Calendar';
  // (Export ends here.)
  // Add view to list of views to provide.
  $views [$view->name] = $view;

  // ...Repeat all of the above for each view the module should provide.
  // At the end, return array of default views.
  return $views;
}

/**
 * 
 * @param type $view
 * Implaments hook_views_pre_render
 */
function appointment_calendar_views_pre_render(&$view) {
  //If view is appointment calendar block
  if ($view->name == 'appointment_calendar') {
    $selected_date = $view->date_info->date_arg;
    //fetch timeslots based on date
    $slot_query = db_select('appointment_date', 'ad');
    $slot_query->fields('ad', array('slot_values'));
    $slot_query->condition('date', strtotime($selected_date));
    $slot_result = $slot_query->execute()->fetchField();
    foreach (json_decode($slot_result) as $key => $value) {
      $explode = explode('-', $value);
      $date_values .= $explode[0] . ',';
    }
    //Setting time slot values
    $view->style_plugin->options['groupby_times_custom'] = $date_values;
    //Get filled appointment time slots
    $date_query = db_select('field_data_appointment_date', 'ap');
    $date_query->join('field_data_appointment_slot', 'aps', 'aps.entity_id = ap.entity_id');
    $date_query->fields('aps', array('appointment_slot_value '));
    $date_query->condition('ap.appointment_date_value', '%' . db_like($selected_date) . '%', 'LIKE');
    $$date_queryresult = $date_query->execute()->fetchAll(PDO::FETCH_ASSOC);
    foreach ($$date_queryresult as $slot_values) {
      @$count_values[$slot_values['appointment_slot_value']] ++;
    }
    dsm($date_values);
    //Saving views result count
    $view_result_count = count($view->result);
    foreach ($view->result as $each_result) {
      //dsm($each_result);
    }

    //dsm($view->result);
    // dsm($count_values);
    // $view->style_plugin->options['groupby_times_custom'] = $date_values;
    //$view->style_options['groupby_times_custom'] = '10:00:00,11:00:00';
    drupal_add_js(drupal_get_path('module', 'appointment_calendar') . '/js/calendar.js');
  }
}

function appointment_show() {
//  $block = array(block_load('views', 'appointment_calendar-block_3'));
//  $block = _block_render_blocks($block);
//  $block = _block_get_renderable_array($block);
  return '';
}

function daysBetween($start, $end) {
  $dates = array();
  while ($start <= $end) {
    array_push($dates, strtotime(date('Y-m-d', $start)));
    $start += 86400;
  }
  return $dates;
}
